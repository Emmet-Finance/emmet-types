"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmmetMultisigUtilities__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "newStake",
                type: "uint256",
            },
        ],
        name: "MinimalStakeUpdated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "signer",
                type: "address",
            },
        ],
        name: "NewSigner",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "bytes32",
                name: "txHash",
                type: "bytes32",
            },
        ],
        name: "PartialSignature",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint128",
                name: "finalizeReward",
                type: "uint128",
            },
            {
                indexed: false,
                internalType: "uint128",
                name: "signReward",
                type: "uint128",
            },
        ],
        name: "RewardRatesUpdated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "bytes32",
                name: "txHash",
                type: "bytes32",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "id",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
            {
                indexed: false,
                internalType: "bytes[]",
                name: "signers",
                type: "bytes[]",
            },
            {
                indexed: false,
                internalType: "bytes[]",
                name: "aggregatedSignature",
                type: "bytes[]",
            },
        ],
        name: "Signed",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "staker",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "Staked",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "staker",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "Unstaked",
        type: "event",
    },
    {
        inputs: [],
        name: "MANAGER_ROLE",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "SIGNER_ROLE",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "account",
                type: "string",
            },
        ],
        name: "accountStats",
        outputs: [
            {
                internalType: "uint128",
                name: "received",
                type: "uint128",
            },
            {
                internalType: "uint128",
                name: "sent",
                type: "uint128",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "bft",
        outputs: [
            {
                internalType: "uint128",
                name: "totalSigners",
                type: "uint128",
            },
            {
                internalType: "uint128",
                name: "threshold",
                type: "uint128",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "emmetData",
        outputs: [
            {
                internalType: "contract IEmmetData",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "emmetToken",
        outputs: [
            {
                internalType: "contract IERC20",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint64",
                name: "fromChainId",
                type: "uint64",
            },
            {
                internalType: "uint64",
                name: "toChainId",
                type: "uint64",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                internalType: "string",
                name: "fromToken",
                type: "string",
            },
            {
                internalType: "string",
                name: "toToken",
                type: "string",
            },
            {
                internalType: "string",
                name: "recipient",
                type: "string",
            },
        ],
        name: "encodeParams",
        outputs: [
            {
                internalType: "bytes",
                name: "encoded",
                type: "bytes",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint64",
                        name: "fromChainId",
                        type: "uint64",
                    },
                    {
                        internalType: "uint64",
                        name: "toChainId",
                        type: "uint64",
                    },
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "string",
                        name: "fromToken",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "toToken",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "recipient",
                        type: "string",
                    },
                ],
                internalType: "struct SignatureVerifier.DecodedData",
                name: "decoded_",
                type: "tuple",
            },
            {
                internalType: "uint256",
                name: "nonce_",
                type: "uint256",
            },
        ],
        name: "generateHash",
        outputs: [
            {
                internalType: "bytes32",
                name: "txHash",
                type: "bytes32",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "txHash_",
                type: "bytes32",
            },
        ],
        name: "getSignatures",
        outputs: [
            {
                internalType: "uint256",
                name: "signatureCount",
                type: "uint256",
            },
            {
                internalType: "bool",
                name: "finalized",
                type: "bool",
            },
            {
                internalType: "bytes[]",
                name: "aggregatedSignature",
                type: "bytes[]",
            },
            {
                internalType: "bytes[]",
                name: "signers",
                type: "bytes[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "txHash_",
                type: "bytes32",
            },
        ],
        name: "getTransaction",
        outputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "txHash",
                        type: "bytes32",
                    },
                    {
                        internalType: "uint256",
                        name: "nonce",
                        type: "uint256",
                    },
                    {
                        internalType: "uint128",
                        name: "sentAmount",
                        type: "uint128",
                    },
                    {
                        internalType: "uint64",
                        name: "fromChainId",
                        type: "uint64",
                    },
                    {
                        internalType: "uint64",
                        name: "toChainId",
                        type: "uint64",
                    },
                    {
                        internalType: "string",
                        name: "fromToken",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "toToken",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "sender",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "recipient",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "originalHash",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "destinationHash",
                        type: "string",
                    },
                    {
                        internalType: "uint128",
                        name: "started",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "finished",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "receivedAmount",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "protocolFee",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "tokenFee",
                        type: "uint128",
                    },
                ],
                internalType: "struct MultiSigTypes.Transaction",
                name: "transaction",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "batch",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "skip",
                type: "uint256",
            },
        ],
        name: "getTransactions",
        outputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "txHash",
                        type: "bytes32",
                    },
                    {
                        internalType: "uint256",
                        name: "nonce",
                        type: "uint256",
                    },
                    {
                        internalType: "uint128",
                        name: "sentAmount",
                        type: "uint128",
                    },
                    {
                        internalType: "uint64",
                        name: "fromChainId",
                        type: "uint64",
                    },
                    {
                        internalType: "uint64",
                        name: "toChainId",
                        type: "uint64",
                    },
                    {
                        internalType: "string",
                        name: "fromToken",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "toToken",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "sender",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "recipient",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "originalHash",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "destinationHash",
                        type: "string",
                    },
                    {
                        internalType: "uint128",
                        name: "started",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "finished",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "receivedAmount",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "protocolFee",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "tokenFee",
                        type: "uint128",
                    },
                ],
                internalType: "struct MultiSigTypes.Transaction[]",
                name: "transactionsArray",
                type: "tuple[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
            },
        ],
        name: "hashes",
        outputs: [
            {
                internalType: "bytes32",
                name: "txHash",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "minStake",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "txHash",
                type: "bytes32",
            },
        ],
        name: "nonEvmHashes",
        outputs: [
            {
                internalType: "bytes32",
                name: "nonEvmDataHash",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "nonce",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "symbol",
                type: "string",
            },
        ],
        name: "priceFeeds",
        outputs: [
            {
                internalType: "address",
                name: "priceFeed",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "rewardAmounts",
        outputs: [
            {
                internalType: "uint128",
                name: "finalizeReward",
                type: "uint128",
            },
            {
                internalType: "uint128",
                name: "signReward",
                type: "uint128",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "signer",
                type: "address",
            },
        ],
        name: "rewards",
        outputs: [
            {
                internalType: "uint256",
                name: "reward",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "candidate",
                type: "address",
            },
        ],
        name: "roleRequests",
        outputs: [
            {
                internalType: "uint256",
                name: "eligibleTime",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "txHash",
                type: "bytes32",
            },
        ],
        name: "signatures",
        outputs: [
            {
                internalType: "uint256",
                name: "signatureCount",
                type: "uint256",
            },
            {
                internalType: "bool",
                name: "finalized",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "staker",
                type: "address",
            },
        ],
        name: "stakes",
        outputs: [
            {
                internalType: "uint256",
                name: "stake",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "totalAmountUSD",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "totalFeesUSD",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "txHash",
                type: "bytes32",
            },
        ],
        name: "transactions",
        outputs: [
            {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
            },
            {
                internalType: "uint128",
                name: "sentAmount",
                type: "uint128",
            },
            {
                internalType: "uint64",
                name: "fromChainId",
                type: "uint64",
            },
            {
                internalType: "uint64",
                name: "toChainId",
                type: "uint64",
            },
            {
                internalType: "bytes16",
                name: "fromToken",
                type: "bytes16",
            },
            {
                internalType: "bytes16",
                name: "toToken",
                type: "bytes16",
            },
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "part1",
                        type: "bytes32",
                    },
                    {
                        internalType: "bytes32",
                        name: "part2",
                        type: "bytes32",
                    },
                ],
                internalType: "struct BytesHelper.Data",
                name: "sender",
                type: "tuple",
            },
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "part1",
                        type: "bytes32",
                    },
                    {
                        internalType: "bytes32",
                        name: "part2",
                        type: "bytes32",
                    },
                ],
                internalType: "struct BytesHelper.Data",
                name: "recipient",
                type: "tuple",
            },
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "part1",
                        type: "bytes32",
                    },
                    {
                        internalType: "bytes32",
                        name: "part2",
                        type: "bytes32",
                    },
                ],
                internalType: "struct BytesHelper.Data",
                name: "originalHash",
                type: "tuple",
            },
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "part1",
                        type: "bytes32",
                    },
                    {
                        internalType: "bytes32",
                        name: "part2",
                        type: "bytes32",
                    },
                ],
                internalType: "struct BytesHelper.Data",
                name: "destinationHash",
                type: "tuple",
            },
            {
                internalType: "uint128",
                name: "started",
                type: "uint128",
            },
            {
                internalType: "uint128",
                name: "finished",
                type: "uint128",
            },
            {
                internalType: "uint128",
                name: "protocolFee",
                type: "uint128",
            },
            {
                internalType: "uint128",
                name: "tokenFee",
                type: "uint128",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "uniqueAddresses",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
class EmmetMultisigUtilities__factory {
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.EmmetMultisigUtilities__factory = EmmetMultisigUtilities__factory;
EmmetMultisigUtilities__factory.abi = _abi;
//# sourceMappingURL=data:application/json;base64,