/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  BridgeTypes,
  BridgeTypesInterface,
} from "../../../../contracts/bridge/components/BridgeTypes";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "ccmHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint128",
        name: "fromChainId",
        type: "uint128",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "foreignIndexOut",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sentAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "receiveAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "fromToken",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "toToken",
        type: "string",
      },
    ],
    name: "ReceivedInstallment",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "txHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint128",
        name: "toChainId",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sentAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "fromToken",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "toToken",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "to",
        type: "string",
      },
    ],
    name: "SentInstallment",
    type: "event",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206a2203e27ac5b909473c8d6c49726060c79fa9ae4f4719052c1eba3d8cf15fd364736f6c63430008180033";

type BridgeTypesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeTypesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeTypes__factory extends ContractFactory {
  constructor(...args: BridgeTypesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BridgeTypes & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BridgeTypes__factory {
    return super.connect(runner) as BridgeTypes__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeTypesInterface {
    return new Interface(_abi) as BridgeTypesInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): BridgeTypes {
    return new Contract(address, _abi, runner) as unknown as BridgeTypes;
  }
}
