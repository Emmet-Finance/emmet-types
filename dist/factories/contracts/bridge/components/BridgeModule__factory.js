"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BridgeModule__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "EnforcedPause",
        type: "error",
    },
    {
        inputs: [],
        name: "ExpectedPause",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "newAdmin",
                type: "address",
            },
        ],
        name: "AdminUpdated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "newBridge",
                type: "address",
            },
        ],
        name: "BridgeUpdated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "newEmmetData",
                type: "address",
            },
        ],
        name: "DataUpdated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "account",
                type: "address",
            },
        ],
        name: "Paused",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "account",
                type: "address",
            },
        ],
        name: "Unpaused",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "string",
                name: "symbol",
                type: "string",
            },
            {
                indexed: false,
                internalType: "address",
                name: "recepient",
                type: "address",
            },
        ],
        name: "Withdraw",
        type: "event",
    },
    {
        inputs: [],
        name: "BridgeSettings",
        outputs: [
            {
                internalType: "contract IEmmetData",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "admin",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "bridge",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "coinWithdraw",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "pause",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "paused",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "enum BridgeTypes.Step",
                name: "step",
                type: "uint8",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "blockNumber",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "foreignIndexOut",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "value",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "start",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "sentAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "receiveAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint128",
                        name: "fromChainId",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "toChainId",
                        type: "uint128",
                    },
                    {
                        internalType: "string",
                        name: "to",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "fromToken",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "toToken",
                        type: "string",
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes",
                    },
                ],
                internalType: "struct BridgeTypes.ReceiveParams",
                name: "params",
                type: "tuple",
            },
        ],
        name: "receiveInstallment",
        outputs: [
            {
                internalType: "uint256",
                name: "receiveAmount",
                type: "uint256",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "enum BridgeTypes.Step",
                name: "step",
                type: "uint8",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "blockNumber",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "isFeeERC20",
                        type: "bool",
                    },
                    {
                        internalType: "uint256",
                        name: "sentAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "receiveAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint128",
                        name: "toChainId",
                        type: "uint128",
                    },
                    {
                        internalType: "string",
                        name: "fromToken",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "toToken",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "to",
                        type: "string",
                    },
                    {
                        internalType: "bool",
                        name: "isSuccess",
                        type: "bool",
                    },
                ],
                internalType: "struct BridgeTypes.SendParams",
                name: "params",
                type: "tuple",
            },
        ],
        name: "sendInstallment",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "interfaceId",
                type: "bytes4",
            },
        ],
        name: "supportsInterface",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenContract",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "tokenWithdraw",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "unpause",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newAdmin",
                type: "address",
            },
        ],
        name: "updateAdmin",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newBridge",
                type: "address",
            },
        ],
        name: "updateBridge",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newEmmetData",
                type: "address",
            },
        ],
        name: "updateData",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        stateMutability: "payable",
        type: "receive",
    },
];
class BridgeModule__factory {
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.BridgeModule__factory = BridgeModule__factory;
BridgeModule__factory.abi = _abi;
