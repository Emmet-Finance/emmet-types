"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignatureVerifier__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "DataIsTooShort",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "thisChainId",
                type: "uint256",
            },
            {
                internalType: "uint64",
                name: "provided",
                type: "uint64",
            },
        ],
        name: "WrongDestinationChain",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        name: "decodeCommonData",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint64",
                        name: "fromChainId",
                        type: "uint64",
                    },
                    {
                        internalType: "uint64",
                        name: "toChainId",
                        type: "uint64",
                    },
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "string",
                        name: "fromToken",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "toToken",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "recipient",
                        type: "string",
                    },
                ],
                internalType: "struct SignatureVerifier.DecodedData",
                name: "decoded",
                type: "tuple",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint64",
                name: "fromChainId",
                type: "uint64",
            },
            {
                internalType: "uint64",
                name: "toChainId",
                type: "uint64",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                internalType: "string",
                name: "fromToken",
                type: "string",
            },
            {
                internalType: "string",
                name: "toToken",
                type: "string",
            },
            {
                internalType: "string",
                name: "recipient",
                type: "string",
            },
        ],
        name: "encodeCommonData",
        outputs: [
            {
                internalType: "bytes",
                name: "encoded",
                type: "bytes",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "addr_",
                type: "string",
            },
        ],
        name: "stringToAddress",
        outputs: [
            {
                internalType: "address",
                name: "addr",
                type: "address",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "signature",
                type: "bytes",
            },
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
            {
                internalType: "address",
                name: "signer",
                type: "address",
            },
        ],
        name: "verifyLocalSignature",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "signature",
                type: "bytes",
            },
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
            {
                internalType: "address",
                name: "signer",
                type: "address",
            },
        ],
        name: "verifySignature",
        outputs: [
            {
                internalType: "bool",
                name: "result",
                type: "bool",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
];
const _bytecode = "0x610b9a61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c806315706fdf146100665780636e71888814610096578063786568da146100b957806380e16031146100cc5780638fc78ec7146100ec575b600080fd5b6100796100743660046106c0565b61010c565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a96100a43660046106fc565b6102f9565b604051901515815260200161008d565b6100a96100c73660046106fc565b610364565b6100df6100da3660046106c0565b6103f0565b60405161008d91906107cf565b6100ff6100fa36600461086a565b6104bd565b60405161008d919061091f565b60008181808060025b602a8110156102ee5761012a6101008561094f565b935084818151811061013e5761013e610981565b016020015160f81c925084610154826001610997565b8151811061016457610164610981565b016020015160f81c915060616001600160a01b0384161080159061019257506066836001600160a01b031611155b156101a9576101a26057846109b0565b9250610214565b6030836001600160a01b0316101580156101cd57506039836001600160a01b031611155b156101dd576101a26030846109b0565b6041836001600160a01b03161015801561020157506046836001600160a01b031611155b15610214576102116037846109b0565b92505b6061826001600160a01b03161015801561023857506066826001600160a01b031611155b1561024f576102486057836109b0565b91506102ba565b6030826001600160a01b03161015801561027357506039826001600160a01b031611155b15610283576102486030836109b0565b6041826001600160a01b0316101580156102a757506046826001600160a01b031611155b156102ba576102b76037836109b0565b91505b816102c684601061094f565b6102d091906109d7565b6102da90856109d7565b93506102e7600282610997565b9050610115565b509195945050505050565b600080610305846103f0565b90504681602001516001600160401b031614610350576020810151604051638b0d417760e01b81524660048201526001600160401b0390911660248201526044015b60405180910390fd5b61035b858585610364565b95945050505050565b81516020830120600090816103c6826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050836001600160a01b03166103dc82886104f5565b6001600160a01b0316149695505050505050565b61043b6040518060c0016040528060006001600160401b0316815260200160006001600160401b03168152602001600081526020016060815260200160608152602001606081525090565b60508251101561045e57604051631f5a55b960e11b815260040160405180910390fd5b6000806000806000808780602001905181019061047b9190610a3c565b6040805160c0810182526001600160401b039788168152969095166020870152938501929092526060840152608083015260a082015298975050505050505050565b60608686868686866040516020016104da96959493929190610ae6565b60405160208183030381529060405290509695505050505050565b60008060008061050485610574565b6040805160008152602081018083528b905260ff8316918101919091526060810184905260808101839052929550909350915060019060a0016020604051602081039080840390855afa15801561055f573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b600080600083516041146105ca5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610347565b50505060208101516040820151606083015160001a601b8110156105f6576105f3601b82610b4b565b90505b9193909250565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561063b5761063b6105fd565b604052919050565b60006001600160401b0382111561065c5761065c6105fd565b50601f01601f191660200190565b600082601f83011261067b57600080fd5b813561068e61068982610643565b610613565b8181528460208386010111156106a357600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156106d257600080fd5b81356001600160401b038111156106e857600080fd5b6106f48482850161066a565b949350505050565b60008060006060848603121561071157600080fd5b83356001600160401b038082111561072857600080fd5b6107348783880161066a565b9450602086013591508082111561074a57600080fd5b506107578682870161066a565b92505060408401356001600160a01b038116811461077457600080fd5b809150509250925092565b60005b8381101561079a578181015183820152602001610782565b50506000910152565b600081518084526107bb81602086016020860161077f565b601f01601f19169290920160200192915050565b6020815260006001600160401b038084511660208401528060208501511660408401525060408301516060830152606083015160c0608084015261081660e08401826107a3565b90506080840151601f19808584030160a086015261083483836107a3565b925060a08601519150808584030160c08601525061035b82826107a3565b6001600160401b038116811461086757600080fd5b50565b60008060008060008060c0878903121561088357600080fd5b863561088e81610852565b9550602087013561089e81610852565b94506040870135935060608701356001600160401b03808211156108c157600080fd5b6108cd8a838b0161066a565b945060808901359150808211156108e357600080fd5b6108ef8a838b0161066a565b935060a089013591508082111561090557600080fd5b5061091289828a0161066a565b9150509295509295509295565b60208152600061093260208301846107a3565b9392505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0382811682821681810283169291811582850482141761097857610978610939565b50505092915050565b634e487b7160e01b600052603260045260246000fd5b808201808211156109aa576109aa610939565b92915050565b6001600160a01b038281168282160390808211156109d0576109d0610939565b5092915050565b6001600160a01b038181168382160190808211156109d0576109d0610939565b600082601f830112610a0857600080fd5b8151610a1661068982610643565b818152846020838601011115610a2b57600080fd5b6106f482602083016020870161077f565b60008060008060008060c08789031215610a5557600080fd5b8651610a6081610852565b6020880151909650610a7181610852565b6040880151606089015191965094506001600160401b0380821115610a9557600080fd5b610aa18a838b016109f7565b94506080890151915080821115610ab757600080fd5b610ac38a838b016109f7565b935060a0890151915080821115610ad957600080fd5b5061091289828a016109f7565b60006001600160401b03808916835280881660208401525085604083015260c06060830152610b1860c08301866107a3565b8281036080840152610b2a81866107a3565b905082810360a0840152610b3e81856107a3565b9998505050505050505050565b60ff81811683821601908111156109aa576109aa61093956fea264697066735822122004bd62ed10cd7478f15949bd2efc40cebb221b6b56dfba13b52671daf1b4a82c64736f6c63430008180033";
const isSuperArgs = (xs) => xs.length > 1;
class SignatureVerifier__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.SignatureVerifier__factory = SignatureVerifier__factory;
SignatureVerifier__factory.bytecode = _bytecode;
SignatureVerifier__factory.abi = _abi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbmF0dXJlVmVyaWZpZXJfX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZmFjdG9yaWVzL2NvbnRyYWN0cy9saWJzL1NpZ25hdHVyZVZlcmlmaWVyX19mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLCtDQUErQztBQUMvQyxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG1DQUtnQjtBQVFoQixNQUFNLElBQUksR0FBRztJQUNYO1FBQ0UsTUFBTSxFQUFFLEVBQUU7UUFDVixJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLElBQUksRUFBRSxPQUFPO0tBQ2Q7SUFDRDtRQUNFLE1BQU0sRUFBRTtZQUNOO2dCQUNFLFlBQVksRUFBRSxTQUFTO2dCQUN2QixJQUFJLEVBQUUsYUFBYTtnQkFDbkIsSUFBSSxFQUFFLFNBQVM7YUFDaEI7WUFDRDtnQkFDRSxZQUFZLEVBQUUsUUFBUTtnQkFDdEIsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLElBQUksRUFBRSxRQUFRO2FBQ2Y7U0FDRjtRQUNELElBQUksRUFBRSx1QkFBdUI7UUFDN0IsSUFBSSxFQUFFLE9BQU87S0FDZDtJQUNEO1FBQ0UsTUFBTSxFQUFFO1lBQ047Z0JBQ0UsWUFBWSxFQUFFLE9BQU87Z0JBQ3JCLElBQUksRUFBRSxNQUFNO2dCQUNaLElBQUksRUFBRSxPQUFPO2FBQ2Q7U0FDRjtRQUNELElBQUksRUFBRSxrQkFBa0I7UUFDeEIsT0FBTyxFQUFFO1lBQ1A7Z0JBQ0UsVUFBVSxFQUFFO29CQUNWO3dCQUNFLFlBQVksRUFBRSxRQUFRO3dCQUN0QixJQUFJLEVBQUUsYUFBYTt3QkFDbkIsSUFBSSxFQUFFLFFBQVE7cUJBQ2Y7b0JBQ0Q7d0JBQ0UsWUFBWSxFQUFFLFFBQVE7d0JBQ3RCLElBQUksRUFBRSxXQUFXO3dCQUNqQixJQUFJLEVBQUUsUUFBUTtxQkFDZjtvQkFDRDt3QkFDRSxZQUFZLEVBQUUsU0FBUzt3QkFDdkIsSUFBSSxF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