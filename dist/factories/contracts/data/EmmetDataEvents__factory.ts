/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  EmmetDataEvents,
  EmmetDataEventsInterface,
} from "../../../contracts/data/EmmetDataEvents";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "chainId",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "bridge",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "currency",
        type: "string",
      },
    ],
    name: "ChainUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint128",
        name: "chainId",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gasPrice",
        type: "uint256",
      },
    ],
    name: "GasPriceUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "otherChainId",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "string",
        name: "fromToken",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "toToken",
        type: "string",
      },
    ],
    name: "TokenStrategyUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "priceFeed",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    name: "TokenUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint128",
        name: "chainId",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "enum BridgeTypes.Step",
        name: "step",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "consumesGas",
        type: "uint256",
      },
    ],
    name: "UsedGasUpdated",
    type: "event",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200c9d3c119a39ede2ea6149084153fab28dd16436402e8e9c494b80b220780f6864736f6c63430008180033";

type EmmetDataEventsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EmmetDataEventsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EmmetDataEvents__factory extends ContractFactory {
  constructor(...args: EmmetDataEventsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EmmetDataEvents & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EmmetDataEvents__factory {
    return super.connect(runner) as EmmetDataEvents__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EmmetDataEventsInterface {
    return new Interface(_abi) as EmmetDataEventsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): EmmetDataEvents {
    return new Contract(address, _abi, runner) as unknown as EmmetDataEvents;
  }
}
