"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IEmmetDataAdmin__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "uint128",
                name: "chainId",
                type: "uint128",
            },
        ],
        name: "chains",
        outputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "part1",
                                type: "bytes32",
                            },
                            {
                                internalType: "bytes32",
                                name: "part2",
                                type: "bytes32",
                            },
                        ],
                        internalType: "struct BytesHelper.Data",
                        name: "bridge",
                        type: "tuple",
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "part1",
                                type: "bytes32",
                            },
                            {
                                internalType: "bytes32",
                                name: "part2",
                                type: "bytes32",
                            },
                        ],
                        internalType: "struct BytesHelper.Data",
                        name: "name",
                        type: "tuple",
                    },
                    {
                        internalType: "bytes12",
                        name: "currency",
                        type: "bytes12",
                    },
                ],
                internalType: "struct BridgeTypes.Chain",
                name: "chain",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint128",
                name: "chainId",
                type: "uint128",
            },
            {
                internalType: "enum BridgeTypes.Step",
                name: "step",
                type: "uint8",
            },
        ],
        name: "getGasConsumed",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "txHash",
                type: "bytes32",
            },
        ],
        name: "getInHashToIndex",
        outputs: [
            {
                internalType: "uint256",
                name: "index",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getIndexIn",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getIndexOut",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getNativeCoin",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "txHash",
                type: "bytes32",
            },
        ],
        name: "getOutHashToIndex",
        outputs: [
            {
                internalType: "uint256",
                name: "index",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "symbol",
                type: "string",
            },
        ],
        name: "getToken",
        outputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "token",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "priceFeed",
                        type: "address",
                    },
                    {
                        internalType: "uint8",
                        name: "decimals",
                        type: "uint8",
                    },
                ],
                internalType: "struct BridgeTypes.Token",
                name: "token",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "index",
                type: "uint256",
            },
        ],
        name: "incommingTransactions",
        outputs: [
            {
                internalType: "uint256",
                name: "blockNumber",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "index",
                type: "uint256",
            },
        ],
        name: "outgoingTransactions",
        outputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "txHash",
                        type: "bytes32",
                    },
                    {
                        internalType: "uint256",
                        name: "blockNumber",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "sentAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint128",
                        name: "toChainId",
                        type: "uint128",
                    },
                    {
                        internalType: "bytes16",
                        name: "fromToken",
                        type: "bytes16",
                    },
                    {
                        internalType: "bytes16",
                        name: "toToken",
                        type: "bytes16",
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "part1",
                                type: "bytes32",
                            },
                            {
                                internalType: "bytes32",
                                name: "part2",
                                type: "bytes32",
                            },
                        ],
                        internalType: "struct BytesHelper.Data",
                        name: "to",
                        type: "tuple",
                    },
                    {
                        internalType: "bool",
                        name: "isSuccess",
                        type: "bool",
                    },
                    {
                        internalType: "string",
                        name: "outcome",
                        type: "string",
                    },
                ],
                internalType: "struct BridgeTypes.OutStore",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "ccmHash",
                type: "bytes32",
            },
        ],
        name: "saveIncomingTx",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "txHash",
                type: "bytes32",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "blockNumber",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "isFeeERC20",
                        type: "bool",
                    },
                    {
                        internalType: "uint256",
                        name: "sentAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "receiveAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint128",
                        name: "toChainId",
                        type: "uint128",
                    },
                    {
                        internalType: "string",
                        name: "fromToken",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "toToken",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "to",
                        type: "string",
                    },
                    {
                        internalType: "bool",
                        name: "isSuccess",
                        type: "bool",
                    },
                ],
                internalType: "struct BridgeTypes.SendParams",
                name: "params",
                type: "tuple",
            },
        ],
        name: "saveOutgoingTx",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint128",
                name: "chainId",
                type: "uint128",
            },
            {
                internalType: "string",
                name: "fromToken",
                type: "string",
            },
            {
                internalType: "string",
                name: "toToken",
                type: "string",
            },
        ],
        name: "strategies",
        outputs: [
            {
                components: [
                    {
                        internalType: "enum BridgeTypes.Step[]",
                        name: "outgoing",
                        type: "uint8[]",
                    },
                    {
                        internalType: "enum BridgeTypes.Step[]",
                        name: "incoming",
                        type: "uint8[]",
                    },
                    {
                        internalType: "enum BridgeTypes.Step[]",
                        name: "foreign",
                        type: "uint8[]",
                    },
                ],
                internalType: "struct BridgeTypes.TokenStrategy",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "interfaceId",
                type: "bytes4",
            },
        ],
        name: "supportsInterface",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint128",
                name: "chainId",
                type: "uint128",
            },
            {
                internalType: "string",
                name: "name",
                type: "string",
            },
            {
                internalType: "string",
                name: "bridge",
                type: "string",
            },
            {
                internalType: "string",
                name: "currency",
                type: "string",
            },
        ],
        name: "updateChain",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint128",
                name: "chainId",
                type: "uint128",
            },
            {
                internalType: "uint256",
                name: "gasPrice",
                type: "uint256",
            },
        ],
        name: "updateGasPrice",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint128",
                name: "chainId",
                type: "uint128",
            },
            {
                internalType: "enum BridgeTypes.Step",
                name: "step",
                type: "uint8",
            },
            {
                internalType: "uint256",
                name: "consumesGas",
                type: "uint256",
            },
        ],
        name: "updateGasUsed",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "token",
                type: "address",
            },
            {
                internalType: "address",
                name: "priceFeed",
                type: "address",
            },
            {
                internalType: "uint8",
                name: "decimals",
                type: "uint8",
            },
            {
                internalType: "string",
                name: "symbol",
                type: "string",
            },
        ],
        name: "updateToken",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint128",
                name: "otherChainId",
                type: "uint128",
            },
            {
                internalType: "string",
                name: "fromToken",
                type: "string",
            },
            {
                internalType: "string",
                name: "toToken",
                type: "string",
            },
            {
                internalType: "enum BridgeTypes.Step[]",
                name: "outgoing",
                type: "uint8[]",
            },
            {
                internalType: "enum BridgeTypes.Step[]",
                name: "incoming",
                type: "uint8[]",
            },
            {
                internalType: "enum BridgeTypes.Step[]",
                name: "foreign",
                type: "uint8[]",
            },
        ],
        name: "updateTokenStrategy",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "txHash",
                type: "bytes32",
            },
            {
                internalType: "bool",
                name: "isSucceess",
                type: "bool",
            },
            {
                internalType: "string",
                name: "message",
                type: "string",
            },
        ],
        name: "updateTransaction",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
class IEmmetDataAdmin__factory {
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.IEmmetDataAdmin__factory = IEmmetDataAdmin__factory;
IEmmetDataAdmin__factory.abi = _abi;
