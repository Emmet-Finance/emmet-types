import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, AddressLike, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { MockCCMUser, MockCCMUserInterface } from "../../../contracts/mock/MockCCMUser";
type MockCCMUserConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockCCMUser__factory extends ContractFactory {
    constructor(...args: MockCCMUserConstructorParams);
    getDeployTransaction(_ccm: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(_ccm: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<MockCCMUser & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): MockCCMUser__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50604051610cea380380610cea83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610c57806100936000396000f3fe60806040526004361061003f5760003560e01c80633a16e5cf146100445780634e12476c1461009b5780634f9350c7146100bd57806369c425b8146100f2575b600080fd5b34801561005057600080fd5b506000546100719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100a757600080fd5b506100bb6100b6366004610714565b610105565b005b3480156100c957600080fd5b506100dd6100d8366004610849565b610203565b60408051928352602083019190915201610092565b6100bb610100366004610885565b6102c2565b805160008167ffffffffffffffff811115610122576101226105a9565b60405190808252806020026020018201604052801561014b578160200160208202803683370190505b50905060005b828110156101ba5761017b84828151811061016e5761016e61094a565b6020026020010151610372565b82828151811061018d5761018d61094a565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610151565b507f3891f6bddb7a668cee03340a0827b7251fe23c15273cd1dc25a816c5f691afd387878787856040516101f29594939291906109f8565b60405180910390a150505050505050565b600080546040517f4f9350c70000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff86166004820152602481018590528315156044820152829173ffffffffffffffffffffffffffffffffffffffff1690634f9350c7906064016040805180830381865afa158015610292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b69190610a8c565b91509150935093915050565b6000546040517f80a396d100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906380a396d1903490610326908a908a9033908b908b908b908b90600401610ab0565b60206040518083038185885af1158015610344573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103699190610b4d565b50505050505050565b80516000908290602a03610422576000808060025b602a8110156104175761039c61010085610b7c565b93506103c08582815181106103b3576103b361094a565b016020015160f81c6104af565b92506103e1856103d1836001610bbb565b815181106103b3576103b361094a565b9150816103ef846010610b7c565b6103f99190610bd4565b6104039085610bd4565b9350610410600282610bbb565b9050610387565b509195945050505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f496e76616c696420737472696e67206c656e67746820666f7220616e2045564d60448201527f206164647265737300000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600060618260ff16101580156104c9575060668260ff1611155b156104e2576104d9605783610c08565b60ff1692915050565b60308260ff16101580156104fa575060398260ff1611155b1561050a576104d9603083610c08565b60418260ff1610158015610522575060468260ff1611155b15610532576104d9603783610c08565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4e6f6e2d6865782063686172616374657220696e20616464726573730000000060448201526064016104a6565b919050565b8035801515811461059457600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156105e8576105e86105a9565b604052919050565b600082601f83011261060157600080fd5b813567ffffffffffffffff81111561061b5761061b6105a9565b61062e6020601f19601f840116016105bf565b81815284602083860101111561064357600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff82111561067a5761067a6105a9565b5060051b60200190565b600082601f83011261069557600080fd5b813560206106aa6106a583610660565b6105bf565b82815260059290921b840181019181810190868411156106c957600080fd5b8286015b8481101561070957803567ffffffffffffffff8111156106ed5760008081fd5b6106fb8986838b01016105f0565b8452509183019183016106cd565b509695505050505050565b600080600080600060a0868803121561072c57600080fd5b85359450602061073d818801610599565b9450604087013567ffffffffffffffff8082111561075a57600080fd5b6107668a838b016105f0565b9550606089013591508082111561077c57600080fd5b818901915089601f83011261079057600080fd5b813561079e6106a582610660565b81815260059190911b8301840190848101908c8311156107bd57600080fd5b8585015b838110156107f5578035858111156107d95760008081fd5b6107e78f89838a01016105f0565b8452509186019186016107c1565b5096505050608089013592508083111561080e57600080fd5b505061081c88828901610684565b9150509295509295909350565b80356fffffffffffffffffffffffffffffffff8116811461059457600080fd5b60008060006060848603121561085e57600080fd5b61086784610829565b92506020840135915061087c60408501610599565b90509250925092565b60008060008060008060c0878903121561089e57600080fd5b863595506108ae60208801610829565b9450604087013567ffffffffffffffff808211156108cb57600080fd5b6108d78a838b016105f0565b955060608901359150808211156108ed57600080fd5b506108fa89828a016105f0565b93505060808701357fffffffff000000000000000000000000000000000000000000000000000000008116811461093057600080fd5b915061093e60a08801610599565b90509295509295509295565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b818110156109865760208185018101518683018201520161096a565b506000602082860101526020601f19601f83011685010191505092915050565b60008151808452602080850194506020840160005b838110156109ed57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016109bb565b509495945050505050565b858152600060208615158184015260a06040840152610a1a60a0840187610960565b8381036060850152855180825282820190600581901b8301840184890160005b83811015610a6857601f19868403018552610a56838351610960565b94870194925090860190600101610a3a565b50508681036080880152610a7c81896109a6565b9c9b505050505050505050505050565b60008060408385031215610a9f57600080fd5b505080516020909101519092909150565b8781526fffffffffffffffffffffffffffffffff8716602082015273ffffffffffffffffffffffffffffffffffffffff8616604082015260e060608201526000610afd60e0830187610960565b8281036080840152610b0f8187610960565b7fffffffff000000000000000000000000000000000000000000000000000000009590951660a0840152505090151560c09091015295945050505050565b600060208284031215610b5f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff828116828216818102831692918115828504821417610bb257610bb2610b66565b50505092915050565b80820180821115610bce57610bce610b66565b92915050565b73ffffffffffffffffffffffffffffffffffffffff818116838216019080821115610c0157610c01610b66565b5092915050565b60ff8281168282160390811115610bce57610bce610b6656fea2646970667358221220e668042aa1e2115bb92f102af7afd5b2eda343a74330ff148a6c6c9af3bf56a464736f6c63430008180033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_ccm";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "txHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "isSuccess";
            readonly type: "bool";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "message";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes[]";
            readonly name: "aggregatedSignatureFinal";
            readonly type: "bytes[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "signersFinal";
            readonly type: "address[]";
        }];
        readonly name: "Feedback";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "ccm";
        readonly outputs: readonly [{
            readonly internalType: "contract ICrossChainMessenger";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "toChainId";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "isFeeERC20";
            readonly type: "bool";
        }];
        readonly name: "estimateFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "compensation";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "txHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bool";
            readonly name: "isSuccess";
            readonly type: "bool";
        }, {
            readonly internalType: "string";
            readonly name: "message";
            readonly type: "string";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "aggregatedSignatureFinal";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "string[]";
            readonly name: "signersFinal";
            readonly type: "string[]";
        }];
        readonly name: "feedback";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "toChainId";
            readonly type: "uint128";
        }, {
            readonly internalType: "string";
            readonly name: "receiver";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes4";
            readonly name: "selector";
            readonly type: "bytes4";
        }, {
            readonly internalType: "bool";
            readonly name: "isFeeERC20";
            readonly type: "bool";
        }];
        readonly name: "sendMessage";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): MockCCMUserInterface;
    static connect(address: string, runner?: ContractRunner | null): MockCCMUser;
}
export {};
