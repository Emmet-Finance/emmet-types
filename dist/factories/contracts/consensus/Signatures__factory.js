"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Signatures__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "txHash",
                type: "bytes32",
            },
            {
                indexed: false,
                internalType: "uint128",
                name: "returnToChainId",
                type: "uint128",
            },
            {
                indexed: false,
                internalType: "bool",
                name: "isSuccess",
                type: "bool",
            },
            {
                indexed: false,
                internalType: "string",
                name: "message",
                type: "string",
            },
            {
                indexed: false,
                internalType: "bytes[]",
                name: "aggregatedSignature",
                type: "bytes[]",
            },
            {
                indexed: false,
                internalType: "string[]",
                name: "signers",
                type: "string[]",
            },
        ],
        name: "Feedback",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "bytes32",
                name: "txHash",
                type: "bytes32",
            },
        ],
        name: "PartialSignature",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "txHash",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
            },
            {
                indexed: true,
                internalType: "uint128",
                name: "toChainId",
                type: "uint128",
            },
            {
                indexed: false,
                internalType: "uint128",
                name: "fromChainId",
                type: "uint128",
            },
            {
                indexed: false,
                internalType: "bytes[]",
                name: "aggregatedSignature",
                type: "bytes[]",
            },
            {
                indexed: false,
                internalType: "bytes[]",
                name: "signers",
                type: "bytes[]",
            },
            {
                indexed: false,
                internalType: "bytes",
                name: "callData",
                type: "bytes",
            },
        ],
        name: "Signed",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint128",
                name: "chainId",
                type: "uint128",
            },
            {
                indexed: false,
                internalType: "string",
                name: "chainName",
                type: "string",
            },
            {
                indexed: false,
                internalType: "string",
                name: "operation",
                type: "string",
            },
        ],
        name: "UpdatedNonEvmId",
        type: "event",
    },
];
const _bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200f6c830eba5220ba533ee79833e1dc1f9b3343827dd3966531149a1fe4302e6d64736f6c63430008180033";
const isSuperArgs = (xs) => xs.length > 1;
class Signatures__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.Signatures__factory = Signatures__factory;
Signatures__factory.bytecode = _bytecode;
Signatures__factory.abi = _abi;
