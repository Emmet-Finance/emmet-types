"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IConsensus__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "txHash",
                type: "bytes32",
            },
        ],
        name: "getTransaction",
        outputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "txHash",
                        type: "bytes32",
                    },
                    {
                        internalType: "uint256",
                        name: "indexOrigin",
                        type: "uint256",
                    },
                    {
                        internalType: "uint128",
                        name: "fromChainId",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "toChainId",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "started",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "finished",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "compensation",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "msgValue",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "protocolFee",
                        type: "uint128",
                    },
                    {
                        internalType: "string",
                        name: "sender",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "recipient",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "originalHash",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "destinationHash",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "outcome",
                        type: "string",
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes",
                    },
                ],
                internalType: "struct CrossChainTransaction.CCT",
                name: "txn",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "batch",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "skip",
                type: "uint256",
            },
        ],
        name: "getTransactions",
        outputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "txHash",
                        type: "bytes32",
                    },
                    {
                        internalType: "uint256",
                        name: "indexOrigin",
                        type: "uint256",
                    },
                    {
                        internalType: "uint128",
                        name: "fromChainId",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "toChainId",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "started",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "finished",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "compensation",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "msgValue",
                        type: "uint128",
                    },
                    {
                        internalType: "uint128",
                        name: "protocolFee",
                        type: "uint128",
                    },
                    {
                        internalType: "string",
                        name: "sender",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "recipient",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "originalHash",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "destinationHash",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "outcome",
                        type: "string",
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes",
                    },
                ],
                internalType: "struct CrossChainTransaction.CCT[]",
                name: "txns",
                type: "tuple[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
class IConsensus__factory {
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.IConsensus__factory = IConsensus__factory;
IConsensus__factory.abi = _abi;
