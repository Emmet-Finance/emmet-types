/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IConsensus,
  IConsensusInterface,
} from "../../../contracts/consensus/IConsensus";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "txHash",
        type: "bytes32",
      },
    ],
    name: "getTransaction",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "indexOrigin",
            type: "uint256",
          },
          {
            internalType: "uint128",
            name: "fromChainId",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "toChainId",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "started",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "finished",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "compensation",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "msgValue",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "protocolFee",
            type: "uint128",
          },
          {
            internalType: "string",
            name: "sender",
            type: "string",
          },
          {
            internalType: "string",
            name: "recipient",
            type: "string",
          },
          {
            internalType: "string",
            name: "originalHash",
            type: "string",
          },
          {
            internalType: "string",
            name: "destinationHash",
            type: "string",
          },
          {
            internalType: "string",
            name: "outcome",
            type: "string",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct CrossChainTransaction.CCT",
        name: "txn",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "batch",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "skip",
        type: "uint256",
      },
    ],
    name: "getTransactions",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "indexOrigin",
            type: "uint256",
          },
          {
            internalType: "uint128",
            name: "fromChainId",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "toChainId",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "started",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "finished",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "compensation",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "msgValue",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "protocolFee",
            type: "uint128",
          },
          {
            internalType: "string",
            name: "sender",
            type: "string",
          },
          {
            internalType: "string",
            name: "recipient",
            type: "string",
          },
          {
            internalType: "string",
            name: "originalHash",
            type: "string",
          },
          {
            internalType: "string",
            name: "destinationHash",
            type: "string",
          },
          {
            internalType: "string",
            name: "outcome",
            type: "string",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct CrossChainTransaction.CCT[]",
        name: "txns",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IConsensus__factory {
  static readonly abi = _abi;
  static createInterface(): IConsensusInterface {
    return new Interface(_abi) as IConsensusInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IConsensus {
    return new Contract(address, _abi, runner) as unknown as IConsensus;
  }
}
