/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "EmmetAddressBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetAddressBook__factory>;
    getContractFactory(
      name: "IAddressBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressBook__factory>;
    getContractFactory(
      name: "EmmetAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetAdmin__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "EmmetBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetBridge__factory>;
    getContractFactory(
      name: "EmmetBridgeAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetBridgeAdmin__factory>;
    getContractFactory(
      name: "EmmetBridgeStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetBridgeStorage__factory>;
    getContractFactory(
      name: "EmmetBridgeUtilities",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetBridgeUtilities__factory>;
    getContractFactory(
      name: "IEmmetBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetBridge__factory>;
    getContractFactory(
      name: "IEmmetBridgeAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetBridgeAdmin__factory>;
    getContractFactory(
      name: "IEmmetBridgeTypes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetBridgeTypes__factory>;
    getContractFactory(
      name: "WTON",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WTON__factory>;
    getContractFactory(
      name: "EmmetTokenVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetTokenVault__factory>;
    getContractFactory(
      name: "IEmmetTokenVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetTokenVault__factory>;
    getContractFactory(
      name: "IEmmetVaultAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetVaultAdmin__factory>;
    getContractFactory(
      name: "IWERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWERC20__factory>;
    getContractFactory(
      name: "WrappedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrappedERC20__factory>;
    getContractFactory(
      name: "EmmetData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetData__factory>;
    getContractFactory(
      name: "EmmetDataAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetDataAdmin__factory>;
    getContractFactory(
      name: "EmmetDataUtilities",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetDataUtilities__factory>;
    getContractFactory(
      name: "IEmmetData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetData__factory>;
    getContractFactory(
      name: "IEmmetDataAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetDataAdmin__factory>;
    getContractFactory(
      name: "IEmmetDataTypes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetDataTypes__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "IMessageTransmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageTransmitter__factory>;
    getContractFactory(
      name: "IPriceFeedInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceFeedInterface__factory>;
    getContractFactory(
      name: "ITokenMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenMessenger__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router__factory>;
    getContractFactory(
      name: "IUniswapV3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Factory__factory>;
    getContractFactory(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Pool__factory>;
    getContractFactory(
      name: "IUniswapV3Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Router__factory>;
    getContractFactory(
      name: "IBridgeUtility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeUtility__factory>;
    getContractFactory(
      name: "AddressStorageHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressStorageHelper__factory>;
    getContractFactory(
      name: "BalancerHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerHelper__factory>;
    getContractFactory(
      name: "CCTPHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCTPHelper__factory>;
    getContractFactory(
      name: "HashHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HashHelper__factory>;
    getContractFactory(
      name: "PriceFeedHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceFeedHelper__factory>;
    getContractFactory(
      name: "SignatureVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignatureVerifier__factory>;
    getContractFactory(
      name: "EmmetTokenStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetTokenStrategy__factory>;
    getContractFactory(
      name: "UniswapV3Helper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3Helper__factory>;
    getContractFactory(
      name: "EmmetLiquidityPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetLiquidityPool__factory>;
    getContractFactory(
      name: "EmmetRestaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetRestaking__factory>;
    getContractFactory(
      name: "IEmmetLP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetLP__factory>;
    getContractFactory(
      name: "IEmmetRestaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetRestaking__factory>;
    getContractFactory(
      name: "IEmmetRestakingAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetRestakingAdmin__factory>;
    getContractFactory(
      name: "EmmetMultisig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetMultisig__factory>;
    getContractFactory(
      name: "EmmetToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetToken__factory>;
    getContractFactory(
      name: "EmmetPriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetPriceFeed__factory>;
    getContractFactory(
      name: "GasFees",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasFees__factory>;
    getContractFactory(
      name: "ICombinedGasFees",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICombinedGasFees__factory>;
    getContractFactory(
      name: "IEmmetPriceFeedAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetPriceFeedAdmin__factory>;
    getContractFactory(
      name: "IGasFees",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGasFees__factory>;
    getContractFactory(
      name: "IGasFeesAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGasFeesAdmin__factory>;

    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "EmmetAddressBook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetAddressBook>;
    getContractAt(
      name: "IAddressBook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressBook>;
    getContractAt(
      name: "EmmetAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetAdmin>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "EmmetBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetBridge>;
    getContractAt(
      name: "EmmetBridgeAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetBridgeAdmin>;
    getContractAt(
      name: "EmmetBridgeStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetBridgeStorage>;
    getContractAt(
      name: "EmmetBridgeUtilities",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetBridgeUtilities>;
    getContractAt(
      name: "IEmmetBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetBridge>;
    getContractAt(
      name: "IEmmetBridgeAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetBridgeAdmin>;
    getContractAt(
      name: "IEmmetBridgeTypes",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetBridgeTypes>;
    getContractAt(
      name: "WTON",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WTON>;
    getContractAt(
      name: "EmmetTokenVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetTokenVault>;
    getContractAt(
      name: "IEmmetTokenVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetTokenVault>;
    getContractAt(
      name: "IEmmetVaultAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetVaultAdmin>;
    getContractAt(
      name: "IWERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWERC20>;
    getContractAt(
      name: "WrappedERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WrappedERC20>;
    getContractAt(
      name: "EmmetData",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetData>;
    getContractAt(
      name: "EmmetDataAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetDataAdmin>;
    getContractAt(
      name: "EmmetDataUtilities",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetDataUtilities>;
    getContractAt(
      name: "IEmmetData",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetData>;
    getContractAt(
      name: "IEmmetDataAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetDataAdmin>;
    getContractAt(
      name: "IEmmetDataTypes",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetDataTypes>;
    getContractAt(
      name: "IPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "IMessageTransmitter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageTransmitter>;
    getContractAt(
      name: "IPriceFeedInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceFeedInterface>;
    getContractAt(
      name: "ITokenMessenger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenMessenger>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router>;
    getContractAt(
      name: "IUniswapV3Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Factory>;
    getContractAt(
      name: "IUniswapV3Pool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Pool>;
    getContractAt(
      name: "IUniswapV3Router",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Router>;
    getContractAt(
      name: "IBridgeUtility",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeUtility>;
    getContractAt(
      name: "AddressStorageHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressStorageHelper>;
    getContractAt(
      name: "BalancerHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerHelper>;
    getContractAt(
      name: "CCTPHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CCTPHelper>;
    getContractAt(
      name: "HashHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HashHelper>;
    getContractAt(
      name: "PriceFeedHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceFeedHelper>;
    getContractAt(
      name: "SignatureVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SignatureVerifier>;
    getContractAt(
      name: "EmmetTokenStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetTokenStrategy>;
    getContractAt(
      name: "UniswapV3Helper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3Helper>;
    getContractAt(
      name: "EmmetLiquidityPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetLiquidityPool>;
    getContractAt(
      name: "EmmetRestaking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetRestaking>;
    getContractAt(
      name: "IEmmetLP",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetLP>;
    getContractAt(
      name: "IEmmetRestaking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetRestaking>;
    getContractAt(
      name: "IEmmetRestakingAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetRestakingAdmin>;
    getContractAt(
      name: "EmmetMultisig",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetMultisig>;
    getContractAt(
      name: "EmmetToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetToken>;
    getContractAt(
      name: "EmmetPriceFeed",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetPriceFeed>;
    getContractAt(
      name: "GasFees",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GasFees>;
    getContractAt(
      name: "ICombinedGasFees",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICombinedGasFees>;
    getContractAt(
      name: "IEmmetPriceFeedAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetPriceFeedAdmin>;
    getContractAt(
      name: "IGasFees",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGasFees>;
    getContractAt(
      name: "IGasFeesAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGasFeesAdmin>;

    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "EmmetAddressBook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetAddressBook>;
    deployContract(
      name: "IAddressBook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressBook>;
    deployContract(
      name: "EmmetAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetAdmin>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "EmmetBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetBridge>;
    deployContract(
      name: "EmmetBridgeAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetBridgeAdmin>;
    deployContract(
      name: "EmmetBridgeStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetBridgeStorage>;
    deployContract(
      name: "EmmetBridgeUtilities",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetBridgeUtilities>;
    deployContract(
      name: "IEmmetBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetBridge>;
    deployContract(
      name: "IEmmetBridgeAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetBridgeAdmin>;
    deployContract(
      name: "IEmmetBridgeTypes",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetBridgeTypes>;
    deployContract(
      name: "WTON",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WTON>;
    deployContract(
      name: "EmmetTokenVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetTokenVault>;
    deployContract(
      name: "IEmmetTokenVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetTokenVault>;
    deployContract(
      name: "IEmmetVaultAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetVaultAdmin>;
    deployContract(
      name: "IWERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWERC20>;
    deployContract(
      name: "WrappedERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WrappedERC20>;
    deployContract(
      name: "EmmetData",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetData>;
    deployContract(
      name: "EmmetDataAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetDataAdmin>;
    deployContract(
      name: "EmmetDataUtilities",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetDataUtilities>;
    deployContract(
      name: "IEmmetData",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetData>;
    deployContract(
      name: "IEmmetDataAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetDataAdmin>;
    deployContract(
      name: "IEmmetDataTypes",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetDataTypes>;
    deployContract(
      name: "IPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPool>;
    deployContract(
      name: "IVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVault>;
    deployContract(
      name: "IMessageTransmitter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageTransmitter>;
    deployContract(
      name: "IPriceFeedInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceFeedInterface>;
    deployContract(
      name: "ITokenMessenger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenMessenger>;
    deployContract(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Pair>;
    deployContract(
      name: "IUniswapV2Router",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router>;
    deployContract(
      name: "IUniswapV3Factory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3Factory>;
    deployContract(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3Pool>;
    deployContract(
      name: "IUniswapV3Router",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3Router>;
    deployContract(
      name: "IBridgeUtility",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridgeUtility>;
    deployContract(
      name: "AddressStorageHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddressStorageHelper>;
    deployContract(
      name: "BalancerHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BalancerHelper>;
    deployContract(
      name: "CCTPHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPHelper>;
    deployContract(
      name: "HashHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HashHelper>;
    deployContract(
      name: "PriceFeedHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriceFeedHelper>;
    deployContract(
      name: "SignatureVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SignatureVerifier>;
    deployContract(
      name: "EmmetTokenStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetTokenStrategy>;
    deployContract(
      name: "UniswapV3Helper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV3Helper>;
    deployContract(
      name: "EmmetLiquidityPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetLiquidityPool>;
    deployContract(
      name: "EmmetRestaking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetRestaking>;
    deployContract(
      name: "IEmmetLP",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetLP>;
    deployContract(
      name: "IEmmetRestaking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetRestaking>;
    deployContract(
      name: "IEmmetRestakingAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetRestakingAdmin>;
    deployContract(
      name: "EmmetMultisig",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetMultisig>;
    deployContract(
      name: "EmmetToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetToken>;
    deployContract(
      name: "EmmetPriceFeed",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetPriceFeed>;
    deployContract(
      name: "GasFees",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasFees>;
    deployContract(
      name: "ICombinedGasFees",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICombinedGasFees>;
    deployContract(
      name: "IEmmetPriceFeedAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetPriceFeedAdmin>;
    deployContract(
      name: "IGasFees",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGasFees>;
    deployContract(
      name: "IGasFeesAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGasFeesAdmin>;

    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "EmmetAddressBook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetAddressBook>;
    deployContract(
      name: "IAddressBook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressBook>;
    deployContract(
      name: "EmmetAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetAdmin>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "EmmetBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetBridge>;
    deployContract(
      name: "EmmetBridgeAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetBridgeAdmin>;
    deployContract(
      name: "EmmetBridgeStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetBridgeStorage>;
    deployContract(
      name: "EmmetBridgeUtilities",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetBridgeUtilities>;
    deployContract(
      name: "IEmmetBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetBridge>;
    deployContract(
      name: "IEmmetBridgeAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetBridgeAdmin>;
    deployContract(
      name: "IEmmetBridgeTypes",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetBridgeTypes>;
    deployContract(
      name: "WTON",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WTON>;
    deployContract(
      name: "EmmetTokenVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetTokenVault>;
    deployContract(
      name: "IEmmetTokenVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetTokenVault>;
    deployContract(
      name: "IEmmetVaultAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetVaultAdmin>;
    deployContract(
      name: "IWERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWERC20>;
    deployContract(
      name: "WrappedERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WrappedERC20>;
    deployContract(
      name: "EmmetData",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetData>;
    deployContract(
      name: "EmmetDataAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetDataAdmin>;
    deployContract(
      name: "EmmetDataUtilities",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetDataUtilities>;
    deployContract(
      name: "IEmmetData",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetData>;
    deployContract(
      name: "IEmmetDataAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetDataAdmin>;
    deployContract(
      name: "IEmmetDataTypes",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetDataTypes>;
    deployContract(
      name: "IPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPool>;
    deployContract(
      name: "IVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVault>;
    deployContract(
      name: "IMessageTransmitter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageTransmitter>;
    deployContract(
      name: "IPriceFeedInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceFeedInterface>;
    deployContract(
      name: "ITokenMessenger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenMessenger>;
    deployContract(
      name: "IUniswapV2Pair",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Pair>;
    deployContract(
      name: "IUniswapV2Router",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router>;
    deployContract(
      name: "IUniswapV3Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3Factory>;
    deployContract(
      name: "IUniswapV3Pool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3Pool>;
    deployContract(
      name: "IUniswapV3Router",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3Router>;
    deployContract(
      name: "IBridgeUtility",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridgeUtility>;
    deployContract(
      name: "AddressStorageHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddressStorageHelper>;
    deployContract(
      name: "BalancerHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BalancerHelper>;
    deployContract(
      name: "CCTPHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPHelper>;
    deployContract(
      name: "HashHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HashHelper>;
    deployContract(
      name: "PriceFeedHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriceFeedHelper>;
    deployContract(
      name: "SignatureVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SignatureVerifier>;
    deployContract(
      name: "EmmetTokenStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetTokenStrategy>;
    deployContract(
      name: "UniswapV3Helper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV3Helper>;
    deployContract(
      name: "EmmetLiquidityPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetLiquidityPool>;
    deployContract(
      name: "EmmetRestaking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetRestaking>;
    deployContract(
      name: "IEmmetLP",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetLP>;
    deployContract(
      name: "IEmmetRestaking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetRestaking>;
    deployContract(
      name: "IEmmetRestakingAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetRestakingAdmin>;
    deployContract(
      name: "EmmetMultisig",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetMultisig>;
    deployContract(
      name: "EmmetToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetToken>;
    deployContract(
      name: "EmmetPriceFeed",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetPriceFeed>;
    deployContract(
      name: "GasFees",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasFees>;
    deployContract(
      name: "ICombinedGasFees",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICombinedGasFees>;
    deployContract(
      name: "IEmmetPriceFeedAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetPriceFeedAdmin>;
    deployContract(
      name: "IGasFees",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGasFees>;
    deployContract(
      name: "IGasFeesAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGasFeesAdmin>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
