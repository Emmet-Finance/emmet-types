/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Utils__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "EmmetAddressBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetAddressBook__factory>;
    getContractFactory(
      name: "AddressStorageHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressStorageHelper__factory>;
    getContractFactory(
      name: "IAddressBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressBook__factory>;
    getContractFactory(
      name: "EmmetAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetAdmin__factory>;
    getContractFactory(
      name: "BridgeModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeModule__factory>;
    getContractFactory(
      name: "BridgeTypes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeTypes__factory>;
    getContractFactory(
      name: "CCTPModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCTPModule__factory>;
    getContractFactory(
      name: "IWERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWERC20__factory>;
    getContractFactory(
      name: "LockAndMint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LockAndMint__factory>;
    getContractFactory(
      name: "WrappedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrappedERC20__factory>;
    getContractFactory(
      name: "WrappedERC20Upgradable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrappedERC20Upgradable__factory>;
    getContractFactory(
      name: "IBridgeModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeModule__factory>;
    getContractFactory(
      name: "EmmetLP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetLP__factory>;
    getContractFactory(
      name: "IEmmetLP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetLP__factory>;
    getContractFactory(
      name: "EmmetLPAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetLPAdmin__factory>;
    getContractFactory(
      name: "LPModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPModule__factory>;
    getContractFactory(
      name: "EmmetBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetBridge__factory>;
    getContractFactory(
      name: "EmmetBridgeHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetBridgeHelper__factory>;
    getContractFactory(
      name: "EmmetBridgeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetBridgeManager__factory>;
    getContractFactory(
      name: "IEmmetBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetBridge__factory>;
    getContractFactory(
      name: "Consensus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Consensus__factory>;
    getContractFactory(
      name: "RelayerStakesAndRoles",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RelayerStakesAndRoles__factory>;
    getContractFactory(
      name: "Signatures",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Signatures__factory>;
    getContractFactory(
      name: "TestEmmetToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestEmmetToken__factory>;
    getContractFactory(
      name: "BridgeStats",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeStats__factory>;
    getContractFactory(
      name: "DataStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DataStorage__factory>;
    getContractFactory(
      name: "EmmetData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetData__factory>;
    getContractFactory(
      name: "EmmetDataAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetDataAdmin__factory>;
    getContractFactory(
      name: "EmmetDataEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetDataEvents__factory>;
    getContractFactory(
      name: "IBridgeStats",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeStats__factory>;
    getContractFactory(
      name: "IEmmetData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetData__factory>;
    getContractFactory(
      name: "IEmmetDataAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetDataAdmin__factory>;
    getContractFactory(
      name: "IMessageTransmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageTransmitter__factory>;
    getContractFactory(
      name: "ITokenMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenMessenger__factory>;
    getContractFactory(
      name: "HashHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HashHelper__factory>;
    getContractFactory(
      name: "RelayerRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RelayerRewards__factory>;
    getContractFactory(
      name: "CCMStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCMStorage__factory>;
    getContractFactory(
      name: "CCMUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCMUtils__factory>;
    getContractFactory(
      name: "CrossChainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainMessenger__factory>;
    getContractFactory(
      name: "CrossChainMessengerAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainMessengerAdmin__factory>;
    getContractFactory(
      name: "ICrossChainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrossChainMessenger__factory>;
    getContractFactory(
      name: "Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mock__factory>;
    getContractFactory(
      name: "MockCCMUser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockCCMUser__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockRelayerRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRelayerRewards__factory>;
    getContractFactory(
      name: "SigTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SigTester__factory>;
    getContractFactory(
      name: "EmmetPriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmmetPriceFeed__factory>;
    getContractFactory(
      name: "IEmmetPriceFeedAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmmetPriceFeedAdmin__factory>;
    getContractFactory(
      name: "IPriceFeedInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceFeedInterface__factory>;
    getContractFactory(
      name: "EFD",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EFD__factory>;
    getContractFactory(
      name: "EMMET",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EMMET__factory>;
    getContractFactory(
      name: "Emmet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Emmet__factory>;
    getContractFactory(
      name: "MATIC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MATIC__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "IBeacon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Utils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Utils>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "EmmetAddressBook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetAddressBook>;
    getContractAt(
      name: "AddressStorageHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressStorageHelper>;
    getContractAt(
      name: "IAddressBook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressBook>;
    getContractAt(
      name: "EmmetAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetAdmin>;
    getContractAt(
      name: "BridgeModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeModule>;
    getContractAt(
      name: "BridgeTypes",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeTypes>;
    getContractAt(
      name: "CCTPModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CCTPModule>;
    getContractAt(
      name: "IWERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWERC20>;
    getContractAt(
      name: "LockAndMint",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LockAndMint>;
    getContractAt(
      name: "WrappedERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WrappedERC20>;
    getContractAt(
      name: "WrappedERC20Upgradable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WrappedERC20Upgradable>;
    getContractAt(
      name: "IBridgeModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeModule>;
    getContractAt(
      name: "EmmetLP",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetLP>;
    getContractAt(
      name: "IEmmetLP",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetLP>;
    getContractAt(
      name: "EmmetLPAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetLPAdmin>;
    getContractAt(
      name: "LPModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LPModule>;
    getContractAt(
      name: "EmmetBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetBridge>;
    getContractAt(
      name: "EmmetBridgeHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetBridgeHelper>;
    getContractAt(
      name: "EmmetBridgeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetBridgeManager>;
    getContractAt(
      name: "IEmmetBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetBridge>;
    getContractAt(
      name: "Consensus",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Consensus>;
    getContractAt(
      name: "RelayerStakesAndRoles",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RelayerStakesAndRoles>;
    getContractAt(
      name: "Signatures",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Signatures>;
    getContractAt(
      name: "TestEmmetToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestEmmetToken>;
    getContractAt(
      name: "BridgeStats",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeStats>;
    getContractAt(
      name: "DataStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DataStorage>;
    getContractAt(
      name: "EmmetData",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetData>;
    getContractAt(
      name: "EmmetDataAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetDataAdmin>;
    getContractAt(
      name: "EmmetDataEvents",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetDataEvents>;
    getContractAt(
      name: "IBridgeStats",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeStats>;
    getContractAt(
      name: "IEmmetData",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetData>;
    getContractAt(
      name: "IEmmetDataAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetDataAdmin>;
    getContractAt(
      name: "IMessageTransmitter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageTransmitter>;
    getContractAt(
      name: "ITokenMessenger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenMessenger>;
    getContractAt(
      name: "HashHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HashHelper>;
    getContractAt(
      name: "RelayerRewards",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RelayerRewards>;
    getContractAt(
      name: "CCMStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CCMStorage>;
    getContractAt(
      name: "CCMUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CCMUtils>;
    getContractAt(
      name: "CrossChainMessenger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainMessenger>;
    getContractAt(
      name: "CrossChainMessengerAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainMessengerAdmin>;
    getContractAt(
      name: "ICrossChainMessenger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrossChainMessenger>;
    getContractAt(
      name: "Mock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Mock>;
    getContractAt(
      name: "MockCCMUser",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockCCMUser>;
    getContractAt(
      name: "MockERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockRelayerRewards",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockRelayerRewards>;
    getContractAt(
      name: "SigTester",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SigTester>;
    getContractAt(
      name: "EmmetPriceFeed",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EmmetPriceFeed>;
    getContractAt(
      name: "IEmmetPriceFeedAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmmetPriceFeedAdmin>;
    getContractAt(
      name: "IPriceFeedInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceFeedInterface>;
    getContractAt(
      name: "EFD",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EFD>;
    getContractAt(
      name: "EMMET",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EMMET>;
    getContractAt(
      name: "Emmet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Emmet>;
    getContractAt(
      name: "MATIC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MATIC>;

    deployContract(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PausableUpgradeable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "EmmetAddressBook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetAddressBook>;
    deployContract(
      name: "AddressStorageHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddressStorageHelper>;
    deployContract(
      name: "IAddressBook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressBook>;
    deployContract(
      name: "EmmetAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetAdmin>;
    deployContract(
      name: "BridgeModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgeModule>;
    deployContract(
      name: "BridgeTypes",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgeTypes>;
    deployContract(
      name: "CCTPModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPModule>;
    deployContract(
      name: "IWERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWERC20>;
    deployContract(
      name: "LockAndMint",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LockAndMint>;
    deployContract(
      name: "WrappedERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WrappedERC20>;
    deployContract(
      name: "WrappedERC20Upgradable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WrappedERC20Upgradable>;
    deployContract(
      name: "IBridgeModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridgeModule>;
    deployContract(
      name: "EmmetLP",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetLP>;
    deployContract(
      name: "IEmmetLP",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetLP>;
    deployContract(
      name: "EmmetLPAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetLPAdmin>;
    deployContract(
      name: "LPModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LPModule>;
    deployContract(
      name: "EmmetBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetBridge>;
    deployContract(
      name: "EmmetBridgeHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetBridgeHelper>;
    deployContract(
      name: "EmmetBridgeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetBridgeManager>;
    deployContract(
      name: "IEmmetBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetBridge>;
    deployContract(
      name: "Consensus",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Consensus>;
    deployContract(
      name: "RelayerStakesAndRoles",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RelayerStakesAndRoles>;
    deployContract(
      name: "Signatures",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Signatures>;
    deployContract(
      name: "TestEmmetToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestEmmetToken>;
    deployContract(
      name: "BridgeStats",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgeStats>;
    deployContract(
      name: "DataStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DataStorage>;
    deployContract(
      name: "EmmetData",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetData>;
    deployContract(
      name: "EmmetDataAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetDataAdmin>;
    deployContract(
      name: "EmmetDataEvents",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetDataEvents>;
    deployContract(
      name: "IBridgeStats",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridgeStats>;
    deployContract(
      name: "IEmmetData",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetData>;
    deployContract(
      name: "IEmmetDataAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetDataAdmin>;
    deployContract(
      name: "IMessageTransmitter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageTransmitter>;
    deployContract(
      name: "ITokenMessenger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenMessenger>;
    deployContract(
      name: "HashHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HashHelper>;
    deployContract(
      name: "RelayerRewards",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RelayerRewards>;
    deployContract(
      name: "CCMStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCMStorage>;
    deployContract(
      name: "CCMUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCMUtils>;
    deployContract(
      name: "CrossChainMessenger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CrossChainMessenger>;
    deployContract(
      name: "CrossChainMessengerAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CrossChainMessengerAdmin>;
    deployContract(
      name: "ICrossChainMessenger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICrossChainMessenger>;
    deployContract(
      name: "Mock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Mock>;
    deployContract(
      name: "MockCCMUser",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockCCMUser>;
    deployContract(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "MockRelayerRewards",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockRelayerRewards>;
    deployContract(
      name: "SigTester",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SigTester>;
    deployContract(
      name: "EmmetPriceFeed",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetPriceFeed>;
    deployContract(
      name: "IEmmetPriceFeedAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetPriceFeedAdmin>;
    deployContract(
      name: "IPriceFeedInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceFeedInterface>;
    deployContract(
      name: "EFD",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EFD>;
    deployContract(
      name: "EMMET",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EMMET>;
    deployContract(
      name: "Emmet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Emmet>;
    deployContract(
      name: "MATIC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MATIC>;

    deployContract(
      name: "AccessControlUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "ERC20Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "PausableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PausableUpgradeable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "IERC1822Proxiable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IBeacon",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Utils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "EmmetAddressBook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetAddressBook>;
    deployContract(
      name: "AddressStorageHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddressStorageHelper>;
    deployContract(
      name: "IAddressBook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressBook>;
    deployContract(
      name: "EmmetAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetAdmin>;
    deployContract(
      name: "BridgeModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgeModule>;
    deployContract(
      name: "BridgeTypes",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgeTypes>;
    deployContract(
      name: "CCTPModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPModule>;
    deployContract(
      name: "IWERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWERC20>;
    deployContract(
      name: "LockAndMint",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LockAndMint>;
    deployContract(
      name: "WrappedERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WrappedERC20>;
    deployContract(
      name: "WrappedERC20Upgradable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WrappedERC20Upgradable>;
    deployContract(
      name: "IBridgeModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridgeModule>;
    deployContract(
      name: "EmmetLP",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetLP>;
    deployContract(
      name: "IEmmetLP",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetLP>;
    deployContract(
      name: "EmmetLPAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetLPAdmin>;
    deployContract(
      name: "LPModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LPModule>;
    deployContract(
      name: "EmmetBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetBridge>;
    deployContract(
      name: "EmmetBridgeHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetBridgeHelper>;
    deployContract(
      name: "EmmetBridgeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetBridgeManager>;
    deployContract(
      name: "IEmmetBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetBridge>;
    deployContract(
      name: "Consensus",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Consensus>;
    deployContract(
      name: "RelayerStakesAndRoles",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RelayerStakesAndRoles>;
    deployContract(
      name: "Signatures",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Signatures>;
    deployContract(
      name: "TestEmmetToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestEmmetToken>;
    deployContract(
      name: "BridgeStats",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgeStats>;
    deployContract(
      name: "DataStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DataStorage>;
    deployContract(
      name: "EmmetData",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetData>;
    deployContract(
      name: "EmmetDataAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetDataAdmin>;
    deployContract(
      name: "EmmetDataEvents",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetDataEvents>;
    deployContract(
      name: "IBridgeStats",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridgeStats>;
    deployContract(
      name: "IEmmetData",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetData>;
    deployContract(
      name: "IEmmetDataAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetDataAdmin>;
    deployContract(
      name: "IMessageTransmitter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageTransmitter>;
    deployContract(
      name: "ITokenMessenger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenMessenger>;
    deployContract(
      name: "HashHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HashHelper>;
    deployContract(
      name: "RelayerRewards",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RelayerRewards>;
    deployContract(
      name: "CCMStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCMStorage>;
    deployContract(
      name: "CCMUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCMUtils>;
    deployContract(
      name: "CrossChainMessenger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CrossChainMessenger>;
    deployContract(
      name: "CrossChainMessengerAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CrossChainMessengerAdmin>;
    deployContract(
      name: "ICrossChainMessenger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICrossChainMessenger>;
    deployContract(
      name: "Mock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Mock>;
    deployContract(
      name: "MockCCMUser",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockCCMUser>;
    deployContract(
      name: "MockERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "MockRelayerRewards",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockRelayerRewards>;
    deployContract(
      name: "SigTester",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SigTester>;
    deployContract(
      name: "EmmetPriceFeed",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EmmetPriceFeed>;
    deployContract(
      name: "IEmmetPriceFeedAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEmmetPriceFeedAdmin>;
    deployContract(
      name: "IPriceFeedInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceFeedInterface>;
    deployContract(
      name: "EFD",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EFD>;
    deployContract(
      name: "EMMET",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EMMET>;
    deployContract(
      name: "Emmet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Emmet>;
    deployContract(
      name: "MATIC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MATIC>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
