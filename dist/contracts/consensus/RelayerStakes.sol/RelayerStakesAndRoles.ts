/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../common";

export interface RelayerStakesAndRolesInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "CoolDownPeriodUpdated"
      | "KycPassed"
      | "MinStakeUpdated"
      | "RewardClaimed"
      | "SignerRoleRefused"
      | "Staked"
      | "Unstaked"
  ): EventFragment;
}

export namespace CoolDownPeriodUpdatedEvent {
  export type InputTuple = [newCoolDown: BigNumberish];
  export type OutputTuple = [newCoolDown: bigint];
  export interface OutputObject {
    newCoolDown: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KycPassedEvent {
  export type InputTuple = [candidate: AddressLike];
  export type OutputTuple = [candidate: string];
  export interface OutputObject {
    candidate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinStakeUpdatedEvent {
  export type InputTuple = [newStake: BigNumberish];
  export type OutputTuple = [newStake: bigint];
  export interface OutputObject {
    newStake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerRoleRefusedEvent {
  export type InputTuple = [staker: AddressLike];
  export type OutputTuple = [staker: string];
  export interface OutputObject {
    staker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakedEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RelayerStakesAndRoles extends BaseContract {
  connect(runner?: ContractRunner | null): RelayerStakesAndRoles;
  waitForDeployment(): Promise<this>;

  interface: RelayerStakesAndRolesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "CoolDownPeriodUpdated"
  ): TypedContractEvent<
    CoolDownPeriodUpdatedEvent.InputTuple,
    CoolDownPeriodUpdatedEvent.OutputTuple,
    CoolDownPeriodUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "KycPassed"
  ): TypedContractEvent<
    KycPassedEvent.InputTuple,
    KycPassedEvent.OutputTuple,
    KycPassedEvent.OutputObject
  >;
  getEvent(
    key: "MinStakeUpdated"
  ): TypedContractEvent<
    MinStakeUpdatedEvent.InputTuple,
    MinStakeUpdatedEvent.OutputTuple,
    MinStakeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "SignerRoleRefused"
  ): TypedContractEvent<
    SignerRoleRefusedEvent.InputTuple,
    SignerRoleRefusedEvent.OutputTuple,
    SignerRoleRefusedEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Unstaked"
  ): TypedContractEvent<
    UnstakedEvent.InputTuple,
    UnstakedEvent.OutputTuple,
    UnstakedEvent.OutputObject
  >;

  filters: {
    "CoolDownPeriodUpdated(uint256)": TypedContractEvent<
      CoolDownPeriodUpdatedEvent.InputTuple,
      CoolDownPeriodUpdatedEvent.OutputTuple,
      CoolDownPeriodUpdatedEvent.OutputObject
    >;
    CoolDownPeriodUpdated: TypedContractEvent<
      CoolDownPeriodUpdatedEvent.InputTuple,
      CoolDownPeriodUpdatedEvent.OutputTuple,
      CoolDownPeriodUpdatedEvent.OutputObject
    >;

    "KycPassed(address)": TypedContractEvent<
      KycPassedEvent.InputTuple,
      KycPassedEvent.OutputTuple,
      KycPassedEvent.OutputObject
    >;
    KycPassed: TypedContractEvent<
      KycPassedEvent.InputTuple,
      KycPassedEvent.OutputTuple,
      KycPassedEvent.OutputObject
    >;

    "MinStakeUpdated(uint256)": TypedContractEvent<
      MinStakeUpdatedEvent.InputTuple,
      MinStakeUpdatedEvent.OutputTuple,
      MinStakeUpdatedEvent.OutputObject
    >;
    MinStakeUpdated: TypedContractEvent<
      MinStakeUpdatedEvent.InputTuple,
      MinStakeUpdatedEvent.OutputTuple,
      MinStakeUpdatedEvent.OutputObject
    >;

    "RewardClaimed(address,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "SignerRoleRefused(address)": TypedContractEvent<
      SignerRoleRefusedEvent.InputTuple,
      SignerRoleRefusedEvent.OutputTuple,
      SignerRoleRefusedEvent.OutputObject
    >;
    SignerRoleRefused: TypedContractEvent<
      SignerRoleRefusedEvent.InputTuple,
      SignerRoleRefusedEvent.OutputTuple,
      SignerRoleRefusedEvent.OutputObject
    >;

    "Staked(address,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Unstaked(address,uint256)": TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
    Unstaked: TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
  };
}
