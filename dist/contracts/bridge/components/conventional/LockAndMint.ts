/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace BridgeTypes {
  export type ReceiveParamsStruct = {
    blockNumber: BigNumberish;
    foreignIndexOut: BigNumberish;
    value: BigNumberish;
    start: BigNumberish;
    sentAmount: BigNumberish;
    receiveAmount: BigNumberish;
    fromChainId: BigNumberish;
    toChainId: BigNumberish;
    to: string;
    fromToken: string;
    toToken: string;
    data: BytesLike;
  };

  export type ReceiveParamsStructOutput = [
    blockNumber: bigint,
    foreignIndexOut: bigint,
    value: bigint,
    start: bigint,
    sentAmount: bigint,
    receiveAmount: bigint,
    fromChainId: bigint,
    toChainId: bigint,
    to: string,
    fromToken: string,
    toToken: string,
    data: string
  ] & {
    blockNumber: bigint;
    foreignIndexOut: bigint;
    value: bigint;
    start: bigint;
    sentAmount: bigint;
    receiveAmount: bigint;
    fromChainId: bigint;
    toChainId: bigint;
    to: string;
    fromToken: string;
    toToken: string;
    data: string;
  };

  export type SendParamsStruct = {
    blockNumber: BigNumberish;
    isFeeERC20: boolean;
    sentAmount: BigNumberish;
    receiveAmount: BigNumberish;
    toChainId: BigNumberish;
    fromToken: string;
    toToken: string;
    to: string;
    isSuccess: boolean;
  };

  export type SendParamsStructOutput = [
    blockNumber: bigint,
    isFeeERC20: boolean,
    sentAmount: bigint,
    receiveAmount: bigint,
    toChainId: bigint,
    fromToken: string,
    toToken: string,
    to: string,
    isSuccess: boolean
  ] & {
    blockNumber: bigint;
    isFeeERC20: boolean;
    sentAmount: bigint;
    receiveAmount: bigint;
    toChainId: bigint;
    fromToken: string;
    toToken: string;
    to: string;
    isSuccess: boolean;
  };
}

export interface LockAndMintInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BridgeSettings"
      | "admin"
      | "bridge"
      | "coinWithdraw"
      | "pause"
      | "paused"
      | "receiveInstallment"
      | "sendInstallment"
      | "supportsInterface"
      | "tokenWithdraw"
      | "unpause"
      | "updateAdmin"
      | "updateBridge"
      | "updateData"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminUpdated"
      | "BridgeUpdated"
      | "DataUpdated"
      | "Paused"
      | "Unpaused"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BridgeSettings",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "coinWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveInstallment",
    values: [BigNumberish, BridgeTypes.ReceiveParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "sendInstallment",
    values: [BigNumberish, BridgeTypes.SendParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBridge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateData",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BridgeSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coinWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveInstallment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendInstallment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateData", data: BytesLike): Result;
}

export namespace AdminUpdatedEvent {
  export type InputTuple = [newAdmin: AddressLike];
  export type OutputTuple = [newAdmin: string];
  export interface OutputObject {
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeUpdatedEvent {
  export type InputTuple = [newBridge: AddressLike];
  export type OutputTuple = [newBridge: string];
  export interface OutputObject {
    newBridge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataUpdatedEvent {
  export type InputTuple = [newEmmetData: AddressLike];
  export type OutputTuple = [newEmmetData: string];
  export interface OutputObject {
    newEmmetData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [symbol: string, recepient: AddressLike];
  export type OutputTuple = [symbol: string, recepient: string];
  export interface OutputObject {
    symbol: string;
    recepient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LockAndMint extends BaseContract {
  connect(runner?: ContractRunner | null): LockAndMint;
  waitForDeployment(): Promise<this>;

  interface: LockAndMintInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BridgeSettings: TypedContractMethod<[], [string], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  bridge: TypedContractMethod<[], [string], "view">;

  coinWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  receiveInstallment: TypedContractMethod<
    [step: BigNumberish, params: BridgeTypes.ReceiveParamsStruct],
    [bigint],
    "nonpayable"
  >;

  sendInstallment: TypedContractMethod<
    [step: BigNumberish, params: BridgeTypes.SendParamsStruct],
    [void],
    "payable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenWithdraw: TypedContractMethod<
    [tokenContract: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBridge: TypedContractMethod<
    [newBridge: AddressLike],
    [void],
    "nonpayable"
  >;

  updateData: TypedContractMethod<
    [newEmmetData: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BridgeSettings"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bridge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "coinWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "receiveInstallment"
  ): TypedContractMethod<
    [step: BigNumberish, params: BridgeTypes.ReceiveParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendInstallment"
  ): TypedContractMethod<
    [step: BigNumberish, params: BridgeTypes.SendParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenWithdraw"
  ): TypedContractMethod<
    [tokenContract: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBridge"
  ): TypedContractMethod<[newBridge: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateData"
  ): TypedContractMethod<[newEmmetData: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AdminUpdated"
  ): TypedContractEvent<
    AdminUpdatedEvent.InputTuple,
    AdminUpdatedEvent.OutputTuple,
    AdminUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeUpdated"
  ): TypedContractEvent<
    BridgeUpdatedEvent.InputTuple,
    BridgeUpdatedEvent.OutputTuple,
    BridgeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DataUpdated"
  ): TypedContractEvent<
    DataUpdatedEvent.InputTuple,
    DataUpdatedEvent.OutputTuple,
    DataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "AdminUpdated(address)": TypedContractEvent<
      AdminUpdatedEvent.InputTuple,
      AdminUpdatedEvent.OutputTuple,
      AdminUpdatedEvent.OutputObject
    >;
    AdminUpdated: TypedContractEvent<
      AdminUpdatedEvent.InputTuple,
      AdminUpdatedEvent.OutputTuple,
      AdminUpdatedEvent.OutputObject
    >;

    "BridgeUpdated(address)": TypedContractEvent<
      BridgeUpdatedEvent.InputTuple,
      BridgeUpdatedEvent.OutputTuple,
      BridgeUpdatedEvent.OutputObject
    >;
    BridgeUpdated: TypedContractEvent<
      BridgeUpdatedEvent.InputTuple,
      BridgeUpdatedEvent.OutputTuple,
      BridgeUpdatedEvent.OutputObject
    >;

    "DataUpdated(address)": TypedContractEvent<
      DataUpdatedEvent.InputTuple,
      DataUpdatedEvent.OutputTuple,
      DataUpdatedEvent.OutputObject
    >;
    DataUpdated: TypedContractEvent<
      DataUpdatedEvent.InputTuple,
      DataUpdatedEvent.OutputTuple,
      DataUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdraw(string,address)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
